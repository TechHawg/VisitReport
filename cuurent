import React, { useState, useEffect, useRef, useCallback } from 'react';
import { FileText, Server, HardDrive, Warehouse, Recycle, PlusCircle, Trash2, Upload, Palette, X, Mail, Download, Sun, Moon, Save, FolderOpen, Camera, Image, Search, Filter, AlertCircle, CheckCircle, Home, Calendar, Clock, Edit2, Move, Eye, EyeOff, ChevronRight, ArrowLeft, Plus, FileJson, FileSpreadsheet, HelpCircle, User, Database, Send, Monitor, Users } from 'lucide-react';

// Color Palette for Data Rack
const RACK_COLORS = [
  '#3b82f6', '#22c55e', '#f97316', '#ef4444', '#8b5cf6', '#facc15', '#6b7280', '#ffffff',
];

// Email Recipients Configuration
const EMAIL_RECIPIENTS = {
  inventory: ['purchasing@company.com', 'inventory@company.com'],
  fullReport: ['management@company.com', 'it-director@company.com', 'regional-manager@company.com']
};

// Helper Components
const Section = ({ title, icon, children, helpText }) => (
  <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden mb-8 animate-fade-in">
    <div className="p-6 bg-gray-50 dark:bg-gray-700/50 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between">
      <div className="flex items-center space-x-4">
        {icon}
        <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-100">{title}</h2>
      </div>
      {helpText && (
        <div className="group relative">
          <HelpCircle className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 cursor-help" size={20} />
          <div className="absolute right-0 top-6 w-64 p-3 bg-gray-900 text-white text-sm rounded-lg shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10">
            {helpText}
          </div>
        </div>
      )}
    </div>
    <div className="p-6 md:p-8">
      {children}
    </div>
  </div>
);

const Input = ({ label, error, multiline, ...props }) => {
  const inputRef = useRef(null);
  
  useEffect(() => {
    if (multiline && inputRef.current) {
      // Reset height to auto to get the correct scrollHeight
      inputRef.current.style.height = 'auto';
      // Set the height to the scrollHeight
      inputRef.current.style.height = `${inputRef.current.scrollHeight}px`;
    }
  }, [props.value, multiline]);
  
  const handleChange = (e) => {
    if (props.onChange) {
      props.onChange(e);
    }
    // Immediately adjust height on change for multiline inputs
    if (multiline && inputRef.current) {
      inputRef.current.style.height = 'auto';
      inputRef.current.style.height = `${inputRef.current.scrollHeight}px`;
    }
  };
  
  const inputElement = multiline ? (
    <textarea
      ref={inputRef}
      className={`w-full px-4 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200 border ${error ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'} rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 disabled:bg-gray-100 dark:disabled:bg-gray-800/50 resize-none overflow-hidden`}
      style={{ minHeight: '40px' }}
      {...props}
      onChange={handleChange}
    />
  ) : (
    <input
      className={`w-full px-4 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200 border ${error ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'} rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 disabled:bg-gray-100 dark:disabled:bg-gray-800/50`}
      {...props}
    />
  );
  
  return (
    <div>
      {label && <label className="block text-sm font-medium text-gray-600 dark:text-gray-300 mb-1">{label}</label>}
      {inputElement}
      {error && <p className="mt-1 text-sm text-red-500">{error}</p>}
    </div>
  );
};

const Textarea = ({ label, value, onChange, ...props }) => {
  const textareaRef = useRef(null);
  
  useEffect(() => {
    if (textareaRef.current) {
      // Reset height to auto to get the correct scrollHeight
      textareaRef.current.style.height = 'auto';
      // Set the height to the scrollHeight
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, [value]);
  
  const handleChange = (e) => {
    onChange(e);
    // Immediately adjust height on change
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  };
  
  return (
    <div>
      <label className="block text-sm font-medium text-gray-600 dark:text-gray-300 mb-1">{label}</label>
      <textarea
        ref={textareaRef}
        className="w-full px-4 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 resize-none overflow-hidden"
        style={{ minHeight: '100px' }}
        value={value}
        onChange={handleChange}
        {...props}
      ></textarea>
    </div>
  );
};

const Select = ({ label, error, children, ...props }) => (
  <div>
    {label && <label className="block text-sm font-medium text-gray-600 dark:text-gray-300 mb-1">{label}</label>}
    <select
      className={`w-full px-4 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200 border ${error ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'} rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200`}
      {...props}
    >
      {children}
    </select>
    {error && <p className="mt-1 text-sm text-red-500">{error}</p>}
  </div>
);

const Button = ({ children, onClick, variant = 'primary', className = '', disabled = false, tooltip }) => {
  const baseClasses = 'px-4 py-2 rounded-lg font-semibold transition duration-200 flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed min-h-[40px]';
  const variants = {
    primary: 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50',
    secondary: 'bg-gray-600 hover:bg-gray-700 text-white focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50',
    danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-2 focus:ring-red-500 focus:ring-opacity-50',
    ghost: 'bg-transparent hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200',
    success: 'bg-green-600 hover:bg-green-700 text-white focus:ring-2 focus:ring-green-500 focus:ring-opacity-50'
  };
  return (
    <div className="relative group">
      <button onClick={onClick} disabled={disabled} className={`${baseClasses} ${variants[variant]} ${className}`}>
        {children}
      </button>
      {tooltip && (
        <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-1 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap">
          {tooltip}
        </div>
      )}
    </div>
  );
};

const Modal = ({ isOpen, onClose, title, children, size = 'lg' }) => {
  if (!isOpen) return null;
  const sizes = {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl'
  };
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4">
      <div className={`bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full ${sizes[size]} animate-fade-in-up max-h-[90vh] overflow-hidden flex flex-col`}>
        <div className="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
          <h3 className="text-xl font-bold text-gray-800 dark:text-gray-100">{title}</h3>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-100">
            <X size={24} />
          </button>
        </div>
        <div className="p-6 overflow-y-auto">
          {children}
        </div>
      </div>
    </div>
  );
};

const Alert = ({ variant = 'info', children }) => {
  const variants = {
    info: 'bg-blue-100 border-blue-500 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300',
    success: 'bg-green-100 border-green-500 text-green-700 dark:bg-green-900/30 dark:text-green-300',
    warning: 'bg-yellow-100 border-yellow-500 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300',
    error: 'bg-red-100 border-red-500 text-red-700 dark:bg-red-900/30 dark:text-red-300'
  };
  return (
    <div className={`${variants[variant]} border-l-4 p-4 rounded-r-lg mb-4`}>
      {children}
    </div>
  );
};

const ProgressBar = ({ progress, label }) => (
  <div className="mb-4">
    {label && <div className="text-sm text-gray-600 dark:text-gray-400 mb-1">{label}</div>}
    <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
      <div className="bg-blue-600 h-2.5 rounded-full transition-all duration-300" style={{ width: `${progress}%` }}></div>
    </div>
    <div className="text-xs text-gray-500 mt-1 text-right">{progress}% Complete</div>
  </div>
);

const ConfirmDialog = ({ isOpen, onClose, onConfirm, title, message }) => (
  <Modal isOpen={isOpen} onClose={onClose} title={title} size="sm">
    <p className="text-gray-600 dark:text-gray-300 mb-6">{message}</p>
    <div className="flex justify-end space-x-3">
      <Button variant="ghost" onClick={onClose}>Cancel</Button>
      <Button variant="danger" onClick={() => { onConfirm(); onClose(); }}>Confirm</Button>
    </div>
  </Modal>
);

// Email Configuration Modal
const EmailModal = ({ isOpen, onClose, onSend, type, recipients, data }) => {
  const [emailList, setEmailList] = useState(recipients.join(', '));
  const specialStationsTotal = data.inventory?.specialStations ? 
    Object.values(data.inventory.specialStations).reduce((sum, val) => sum + val, 0) : 0;
  
  const [subject, setSubject] = useState(
    type === 'inventory' 
      ? `Inventory Report - ${data.office} - ${data.date}` 
      : `Office Visit Report - ${data.office} - ${data.date}`
  );
  const [message, setMessage] = useState(
    type === 'inventory'
      ? `Please find attached the inventory report for ${data.office} office visit on ${data.date}.${specialStationsTotal > 0 ? `\n\nSpecial stations documented: ${specialStationsTotal} total\n- Three Monitor Setups: ${data.inventory.specialStations?.threeMonitorSetups || 0}\n- Prospecting Stations: ${data.inventory.specialStations?.prospectingStations || 0}\n- Visitor Stations: ${data.inventory.specialStations?.visitorStations || 0}\n- Applicant Stations: ${data.inventory.specialStations?.applicantStations || 0}\n- EOL Computers: ${data.inventory.specialStations?.eolComputers || 0}` : ''}`
      : `Please find attached the complete office visit report for ${data.office} on ${data.date}.`
  );

  const handleSend = () => {
    onSend({
      to: emailList.split(',').map(e => e.trim()),
      subject,
      message,
      type
    });
    onClose();
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={`Send ${type === 'inventory' ? 'Inventory' : 'Full'} Report`}>
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">To:</label>
          <Input
            type="text"
            value={emailList}
            onChange={(e) => setEmailList(e.target.value)}
            placeholder="email1@company.com, email2@company.com"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Subject:</label>
          <Input
            type="text"
            value={subject}
            onChange={(e) => setSubject(e.target.value)}
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Message:</label>
          <Textarea
            value={message}
            onChange={(e) => setMessage(e.target.value)}
          />
        </div>
        <Alert variant="info">
          The report will be sent as a PDF attachment from your Outlook account.
        </Alert>
        <div className="flex justify-end space-x-3">
          <Button variant="ghost" onClick={onClose}>Cancel</Button>
          <Button onClick={handleSend}>
            <Send size={18} /> Send Email
          </Button>
        </div>
      </div>
    </Modal>
  );
};

// Photo Upload Component
const PhotoUpload = ({ data, setData, location }) => {
  const [selectedPhotos, setSelectedPhotos] = useState([]);
  const [photoLabels, setPhotoLabels] = useState({});
  const [viewingPhoto, setViewingPhoto] = useState(null);
  const fileInputRef = useRef(null);
  const cameraInputRef = useRef(null);

  const handlePhotoUpload = (e) => {
    const files = Array.from(e.target.files);
    files.forEach(file => {
      const reader = new FileReader();
      reader.onload = (event) => {
        const photoId = Date.now() + Math.random();
        const photo = {
          id: photoId,
          name: file.name,
          data: event.target.result,
          timestamp: new Date().toISOString(),
          label: ''
        };
        
        setData(prev => ({
          ...prev,
          pictures: {
            ...prev.pictures,
            [location]: [...(prev.pictures[location] || []), photo]
          }
        }));
      };
      reader.readAsDataURL(file);
    });
    
    // Reset the input so the same file can be selected again
    if (e.target) {
      e.target.value = '';
    }
  };

  const handleLabelChange = (photoId, label) => {
    setData(prev => ({
      ...prev,
      pictures: {
        ...prev.pictures,
        [location]: prev.pictures[location].map(photo =>
          photo.id === photoId ? { ...photo, label } : photo
        )
      }
    }));
  };

  const removePhoto = (photoId) => {
    if (window.confirm('Are you sure you want to remove this photo?')) {
      setData(prev => ({
        ...prev,
        pictures: {
          ...prev.pictures,
          [location]: prev.pictures[location].filter(photo => photo.id !== photoId)
        }
      }));
      setViewingPhoto(null);
    }
  };

  const photos = data.pictures[location] || [];
  
  // Check if device is mobile
  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between flex-wrap gap-2">
        <h4 className="font-semibold text-gray-700 dark:text-gray-200">
          {location === 'dataCloset' ? 'Data Closet Photos' : 'Training Room Photos'}
          {photos.length > 0 && <span className="text-sm font-normal text-gray-500"> ({photos.length})</span>}
        </h4>
        <div className="flex space-x-2">
          {isMobile && (
          <Button onClick={() => cameraInputRef.current?.click()} variant="secondary">
            <Camera size={18} /> Take Photo
          </Button>
          )}
          <Button onClick={() => fileInputRef.current?.click()} variant="secondary">
            <Image size={18} /> {isMobile ? 'Library' : 'Upload'}
          </Button>
        </div>
        {/* Hidden input for taking photos directly */}
        <input
          ref={cameraInputRef}
          type="file"
          accept="image/*"
          capture="environment"
          onChange={handlePhotoUpload}
          className="hidden"
        />
        {/* Hidden input for selecting from library */}
        <input
          ref={fileInputRef}
          type="file"
          multiple={!isMobile}
          accept="image/*"
          onChange={handlePhotoUpload}
          className="hidden"
        />
      </div>
      
      {photos.length > 0 && (
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-3 lg:grid-cols-4 gap-3">
          {photos.map(photo => (
            <div key={photo.id} className="relative group">
              <div className="relative">
                <img
                  src={photo.data}
                  alt={photo.label || photo.name}
                  className="w-full h-32 object-cover rounded-lg cursor-pointer"
                  onClick={() => setViewingPhoto(photo)}
                />
                <div className="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center pointer-events-none">
                  <Eye className="text-white" size={24} />
                </div>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    removePhoto(photo.id);
                  }}
                  className="absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                >
                  <X size={16} />
                </button>
              </div>
              <input
                type="text"
                placeholder="Add label..."
                value={photo.label || ''}
                onChange={(e) => handleLabelChange(photo.id, e.target.value)}
                className="mt-2 w-full px-3 py-2 text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                style={{ fontSize: '16px' }} // Prevents zoom on iOS
              />
            </div>
          ))}
        </div>
      )}
      
      {photos.length === 0 && (
        <div className="text-center py-12 text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
          <Camera className="mx-auto mb-3" size={48} strokeWidth={1} />
          <p className="font-medium">No photos uploaded yet</p>
          <p className="text-sm mt-1">{isMobile ? 'Take a photo or choose from your library' : 'Click to upload photos'}</p>
        </div>
      )}
      
      {/* Photo Viewer Modal */}
      {viewingPhoto && (
        <div className="fixed inset-0 bg-black bg-opacity-90 z-50 flex flex-col" onClick={() => setViewingPhoto(null)}>
          <div className="flex justify-between items-center p-4 text-white">
            <h3 className="text-lg font-semibold">{viewingPhoto.label || 'Photo'}</h3>
            <button onClick={() => setViewingPhoto(null)} className="text-white hover:text-gray-300">
              <X size={24} />
            </button>
          </div>
          <div className="flex-1 flex items-center justify-center p-4" onClick={(e) => e.stopPropagation()}>
            <img
              src={viewingPhoto.data}
              alt={viewingPhoto.label || viewingPhoto.name}
              className="max-w-full max-h-full object-contain"
            />
          </div>
          <div className="p-4 text-white text-center">
            <p className="text-sm">{new Date(viewingPhoto.timestamp).toLocaleString()}</p>
            {viewingPhoto.label && <p className="mt-2">{viewingPhoto.label}</p>}
          </div>
        </div>
      )}
    </div>
  );
};

// Dashboard Component
const DashboardPage = ({ data, currentUser }) => {
  const calculateCompletionProgress = () => {
    let completed = 0;
    let total = 0;
    
    // Check basic required fields
    if (data.rss) completed++;
    total++;
    
    if (data.office) completed++;
    total++;
    
    if (data.date) completed++;
    total++;
    
    // Check summary fields (6 fields)
    Object.values(data.summary).forEach(value => {
      if (value && value.trim() !== '') completed++;
      total++;
    });
    
    // Check office grading (4 items need scores)
    data.officeGrading.forEach(item => {
      if (item.score && item.score !== '') completed++;
      total++;
    });
    
    // Check if hardware data exists
    if (data.officeHardware && data.officeHardware.length > 0) completed++;
    total++;
    
    // Check data closet grading (6 items need scores)
    data.dataCloset.grading.forEach(item => {
      if (item.score && item.score !== '') completed++;
      total++;
    });
    
    // Check if any device locations exist
    if (data.dataCloset.deviceLocations && data.dataCloset.deviceLocations.length > 0) completed++;
    total++;
    
    // Check if any rack locations exist
    if (data.dataCloset.rackLocations && data.dataCloset.rackLocations.length > 0) completed++;
    total++;
    
    // Check if any inventory items have been filled
    const hasInventory = data.inventory.items.some(item => {
      const itemTotal = item.inUse + Object.values(item.otherUse).reduce((a, b) => a + b, 0) + 
                       Object.values(item.spares).reduce((a, b) => a + b, 0) + item.broken;
      return itemTotal > 0;
    });
    if (hasInventory) completed++;
    total++;
    
    // Check if any recycling data exists
    const hasRecycling = [...data.recycling.broughtBack, ...data.recycling.pickupRequired, ...data.recycling.sentToHq]
      .some(item => item.quantity > 0);
    if (hasRecycling) completed++;
    total++;
    
    // Check if photos exist
    if ((data.pictures.dataCloset?.length || 0) + (data.pictures.trainingRoom?.length || 0) > 0) completed++;
    total++;
    
    return total > 0 ? Math.round((completed / total) * 100) : 0;
  };

  const getHealthScore = () => {
    const scores = [];
    
    // Office grade
    if (data.officeGrade !== 'N/A') {
      scores.push(parseInt(data.officeGrade));
    }
    
    // Data closet score
    if (data.dataCloset.score !== 'N/A') {
      scores.push(parseInt(data.dataCloset.score));
    }
    
    if (scores.length === 0) return 'N/A';
    return Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) + '%';
  };

  const getRecentActivity = () => {
    const activities = [];
    
    // Check for recent hardware additions
    if (data.officeHardware.length > 0) {
      activities.push({
        icon: <HardDrive size={16} />,
        text: `${data.officeHardware.length} hardware items documented`,
        color: 'text-green-600'
      });
    }
    
    // Check for photos
    const totalPhotos = (data.pictures.dataCloset?.length || 0) + (data.pictures.trainingRoom?.length || 0);
    if (totalPhotos > 0) {
      activities.push({
        icon: <Camera size={16} />,
        text: `${totalPhotos} photos uploaded`,
        color: 'text-blue-600'
      });
    }
    
    // Check for inventory updates
    const inventoryTotal = data.inventory.items.reduce((sum, item) => {
      return sum + item.inUse + Object.values(item.otherUse).reduce((a, b) => a + b, 0);
    }, 0);
    if (inventoryTotal > 0) {
      activities.push({
        icon: <Warehouse size={16} />,
        text: `${inventoryTotal} inventory items tracked`,
        color: 'text-purple-600'
      });
    }
    
    // Check for special stations
    const specialStationsTotal = Object.values(data.inventory.specialStations || {}).reduce((sum, val) => sum + val, 0);
    if (specialStationsTotal > 0) {
      activities.push({
        icon: <Server size={16} />,
        text: `${specialStationsTotal} special stations documented`,
        color: 'text-orange-600'
      });
    }
    
    return activities;
  };

  return (
    <Section title="Dashboard Overview" icon={<Home className="text-indigo-500" size={32} />}>
      <div className="mb-6 p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <User className="text-gray-600 dark:text-gray-400" size={24} />
          <div>
            <p className="text-sm text-gray-600 dark:text-gray-400">Logged in as:</p>
            <p className="font-semibold text-gray-800 dark:text-gray-200">{currentUser}</p>
          </div>
        </div>
        <div className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
          <Database size={16} />
          <span>Connected to SQL Database</span>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-xl p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">Office Health</h3>
            <CheckCircle className="text-blue-600" size={24} />
          </div>
          <div className="text-3xl font-bold text-blue-600 dark:text-blue-400">
            {getHealthScore()}
          </div>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">Overall Score</p>
        </div>
        
        <div className="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 rounded-xl p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">Next Visit</h3>
            <Calendar className="text-green-600" size={24} />
          </div>
          <div className="text-xl font-bold text-green-600 dark:text-green-400">
            {data.nextVisit ? new Date(data.nextVisit).toLocaleDateString() : 'Not Set'}
          </div>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">
            {data.nextVisit && `In ${Math.ceil((new Date(data.nextVisit) - new Date()) / (1000 * 60 * 60 * 24))} days`}
          </p>
        </div>
        
        <div className="bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 rounded-xl p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">Completion</h3>
            <Clock className="text-purple-600" size={24} />
          </div>
          <div className="text-3xl font-bold text-purple-600 dark:text-purple-400">
            {calculateCompletionProgress()}%
          </div>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">Report Progress</p>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div>
          <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200 mb-4">Recent Activity</h3>
          <div className="space-y-3">
            {getRecentActivity().map((activity, index) => (
              <div key={index} className="flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                <div className={activity.color}>{activity.icon}</div>
                <span className="text-gray-700 dark:text-gray-300">{activity.text}</span>
              </div>
            ))}
            {getRecentActivity().length === 0 && (
              <p className="text-gray-500 dark:text-gray-400">No activity yet. Start filling out the report!</p>
            )}
          </div>
        </div>
        
                        <div>
          <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200 mb-4">Key Metrics</h3>
          <div className="space-y-2">
            <div className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
              <span className="text-gray-600 dark:text-gray-400">Office Grade</span>
              <span className="font-bold text-gray-800 dark:text-gray-200">{data.officeGrade}</span>
            </div>
            <div className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
              <span className="text-gray-600 dark:text-gray-400">Data Closet Score</span>
              <span className="font-bold text-gray-800 dark:text-gray-200">{data.dataCloset.score}</span>
            </div>
            <div className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
              <span className="text-gray-600 dark:text-gray-400">Hardware Items</span>
              <span className="font-bold text-gray-800 dark:text-gray-200">{data.officeHardware.length}</span>
            </div>
            <div className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
              <span className="text-gray-600 dark:text-gray-400">Three Monitor Setups</span>
              <span className="font-bold text-gray-800 dark:text-gray-200">{data.inventory.specialStations?.threeMonitorSetups || 0}</span>
            </div>
            <div className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
              <span className="text-gray-600 dark:text-gray-400">EOL Computers</span>
              <span className="font-bold text-gray-800 dark:text-gray-200">{data.inventory.specialStations?.eolComputers || 0}</span>
            </div>
            <div className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
              <span className="text-gray-600 dark:text-gray-400">Total Photos</span>
              <span className="font-bold text-gray-800 dark:text-gray-200">
                {(data.pictures.dataCloset?.length || 0) + (data.pictures.trainingRoom?.length || 0)}
              </span>
            </div>
          </div>
        </div>
      </div>
      
      <div className="mt-8">
        <ProgressBar progress={calculateCompletionProgress()} label="Overall Report Completion" />
      </div>
    </Section>
  );
};

// Summary Page with validation
const SummaryPage = ({ data, setData, errors, setErrors }) => {
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setData(prev => ({ ...prev, [name]: value }));
    // Clear error when user types
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const handleNestedChange = (section, name, value) => {
    setData(prev => ({ ...prev, [section]: { ...prev[section], [name]: value } }));
  };

  const handleGradingChange = (index, field, value) => {
    const newGrading = [...data.officeGrading];
    newGrading[index][field] = value;
    setData(prev => ({ ...prev, officeGrading: newGrading }));
  };
  
  useEffect(() => {
    if (data.date) {
        const currentDate = new Date(data.date);
        currentDate.setDate(currentDate.getDate() + 60);
        const nextVisitDate = currentDate.toISOString().split('T')[0];
        setData(prev => ({ ...prev, nextVisit: nextVisitDate }));
    }
  }, [data.date, setData]);

  useEffect(() => {
    const scores = data.officeGrading.map(g => g.score).filter(s => s !== '' && !isNaN(s));
    if (scores.length > 0) {
      const avg = scores.reduce((a, b) => a + Number(b), 0) / scores.length;
      const percentage = (avg / 5) * 100;
      setData(prev => ({ ...prev, officeGrade: `${percentage.toFixed(0)}%` }));
    } else {
      setData(prev => ({ ...prev, officeGrade: 'N/A' }));
    }
  }, [data.officeGrading, setData]);

  const scoreOptions = [1, 2, 3, 4, 5];

  return (
    <Section 
      title="Visit Summary" 
      icon={<FileText className="text-blue-500" size={32} />}
      helpText="Complete all required fields marked with *. The next visit date is automatically calculated as 60 days from the visit date."
    >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <Select label="RSS *" name="rss" value={data.rss} onChange={handleInputChange} error={errors.rss}>
                <option value="">Select RSS</option>
                <option>John Smith</option>
                <option>Jane Doe</option>
                <option>Peter Jones</option>
            </Select>
            <Select label="Office *" name="office" value={data.office} onChange={handleInputChange} error={errors.office}>
                <option value="">Select Office</option>
                <option>New York</option>
                <option>Los Angeles</option>
                <option>Chicago</option>
            </Select>
            <Input label="Date *" name="date" type="date" value={data.date} onChange={handleInputChange} error={errors.date} />
            <Input label="Next Expected Visit" name="nextVisit" type="date" value={data.nextVisit} readOnly disabled />
        </div>
        
        <div className="mb-8">
          <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Photo Documentation</h3>
          <Alert variant="info">
            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? 
              'You can take photos directly with your camera or choose from your photo library.' : 
              'Upload photos from your computer to document the data closet and training room.'}
          </Alert>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mt-4">
            <PhotoUpload data={data} setData={setData} location="dataCloset" />
            <PhotoUpload data={data} setData={setData} location="trainingRoom" />
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
             <div className="space-y-6">
                 <Textarea label="Summary" value={data.summary.summaryText} onChange={(e) => handleNestedChange('summary', 'summaryText', e.target.value)} />
                 <Textarea label="PC Repairs" value={data.summary.pcRepairsText} onChange={(e) => handleNestedChange('summary', 'pcRepairsText', e.target.value)} />
                 <Textarea label="Training Room" value={data.summary.trainingRoomText} onChange={(e) => handleNestedChange('summary', 'trainingRoomText', e.target.value)} />
             </div>
             <div className="space-y-6">
                 <Textarea label="Issues / User Experience" value={data.summary.issuesText} onChange={(e) => handleNestedChange('summary', 'issuesText', e.target.value)} />
                 <Textarea label="Recommendations" value={data.summary.recommendationsText} onChange={(e) => handleNestedChange('summary', 'recommendationsText', e.target.value)} />
                 <Textarea label="Follow-up Items" value={data.summary.followUpText} onChange={(e) => handleNestedChange('summary', 'followUpText', e.target.value)} />
             </div>
        </div>
        <div>
            <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200 mb-4">Office Grading</h3>
            <div className="space-y-4">
                {data.officeGrading.map((item, index) => (
                    <div key={index} className="grid grid-cols-1 md:grid-cols-12 gap-4 items-center bg-gray-50 dark:bg-gray-700/50 p-4 rounded-lg">
                        <div className="md:col-span-3 font-semibold text-gray-700 dark:text-gray-200">{item.category}</div>
                        <div className="md:col-span-2">
                             <Select value={item.score} onChange={e => handleGradingChange(index, 'score', e.target.value)}>
                                <option value="">N/A</option>
                                {scoreOptions.map(s => <option key={s} value={s}>{s}</option>)}
                             </Select>
                        </div>
                        <div className="md:col-span-7">
                            <Input type="text" multiline value={item.comments} onChange={e => handleGradingChange(index, 'comments', e.target.value)} placeholder="Comments..."/>
                        </div>
                    </div>
                ))}
            </div>
            <div className="mt-6 bg-blue-100 dark:bg-blue-900/30 border-l-4 border-blue-500 text-blue-700 dark:text-blue-300 p-4 rounded-r-lg flex justify-between items-center">
                <span className="text-xl font-bold">Overall Office Grade:</span>
                <span className="text-3xl font-extrabold">{data.officeGrade}</span>
            </div>
        </div>
    </Section>
  );
};

// Hardware Page with search and export
const HardwarePage = ({ data, setData }) => {
    const [pasteData, setPasteData] = useState('');
    const [searchTerm, setSearchTerm] = useState('');
    const [showPasteHelp, setShowPasteHelp] = useState(false);

    const parsePastedData = () => {
        const rows = pasteData.trim().split('\n');
        const newHardware = rows.map(row => {
            const cols = row.split('\t');
            return {
                serviceTag: cols[0] || '', ram: cols[1] || '', diskDrive: cols[2] || '',
                computerModel: cols[3] || '', lastLogonUser: cols[4] || '', lastLogonDate: cols[5] || '',
                os: cols[6] || '', osVersion: cols[7] || '',
            };
        });
        setData(prev => ({ ...prev, officeHardware: [...prev.officeHardware, ...newHardware] }));
        setPasteData('');
    };

    const handleHardwareChange = (index, field, value) => {
        const newHardware = [...data.officeHardware];
        newHardware[index][field] = value;
        setData(prev => ({ ...prev, officeHardware: newHardware }));
    };

    const addRow = () => {
        setData(prev => ({ ...prev, officeHardware: [...prev.officeHardware, { serviceTag: '', ram: '', diskDrive: '', computerModel: '', lastLogonUser: '', lastLogonDate: '', os: '', osVersion: '' }] }));
    };
    
    const removeRow = (index) => {
        const newHardware = [...data.officeHardware];
        newHardware.splice(index, 1);
        setData(prev => ({...prev, officeHardware: newHardware}));
    };

    const exportToCSV = () => {
        const headers = ['Service Tag', 'RAM', 'Disk Drive', 'Computer Model', 'Last Logon User', 'Last Logon Date', 'OS', 'OS Version'];
        const csvContent = [
            headers.join(','),
            ...data.officeHardware.map(row => 
                Object.values(row).map(val => `"${val}"`).join(',')
            )
        ].join('\n');
        
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `hardware_${data.office}_${data.date}.csv`;
        a.click();
    };

    const filteredHardware = data.officeHardware.filter(item =>
        Object.values(item).some(val => 
            val.toString().toLowerCase().includes(searchTerm.toLowerCase())
        )
    );

    return (
        <Section 
          title="Office Hardware" 
          icon={<HardDrive className="text-green-500" size={32} />}
          helpText="Import hardware data from spreadsheets using tab-separated values. You can also search and export the data."
        >
            <div className="mb-6 space-y-4">
                <div className="flex justify-between items-center">
                    <div className="flex items-center space-x-2">
                        <Search className="text-gray-400" size={20} />
                        <Input 
                            type="text"
                            placeholder="Search hardware..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="w-64"
                        />
                    </div>
                    <Button onClick={exportToCSV} variant="secondary">
                        <FileSpreadsheet size={18} /> Export CSV
                    </Button>
                </div>
                
                <div className="bg-gray-50 dark:bg-gray-700/50 p-4 rounded-lg">
                    <div className="flex justify-between items-center mb-2">
                        <h3 className="font-semibold text-gray-700 dark:text-gray-200">Paste Data from Spreadsheet</h3>
                        <button onClick={() => setShowPasteHelp(!showPasteHelp)} className="text-gray-500 hover:text-gray-700">
                            <HelpCircle size={18} />
                        </button>
                    </div>
                    {showPasteHelp && (
                        <Alert variant="info">
                            Copy data from Excel/Google Sheets with headers: Service Tag, RAM, Disk Drive, Computer Model, Last Logon User, Last Logon Date, OS, OS Version
                        </Alert>
                    )}
                    <Textarea 
                        value={pasteData}
                        onChange={(e) => setPasteData(e.target.value)}
                        placeholder="Service Tag	RAM	Disk Drive	Computer Model..."
                    />
                    <Button onClick={parsePastedData} className="mt-2">Parse and Add to Table</Button>
                </div>
            </div>
            
            <div className="mb-4 text-sm text-gray-600 dark:text-gray-400">
                Showing {filteredHardware.length} of {data.officeHardware.length} items
            </div>
            
            <div className="overflow-x-auto">
                <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                    <thead className="text-xs text-gray-700 dark:text-gray-300 uppercase bg-gray-100 dark:bg-gray-700">
                        <tr>
                            <th className="px-4 py-3">Service Tag</th>
                            <th className="px-4 py-3">RAM</th>
                            <th className="px-4 py-3">Disk Drive</th>
                            <th className="px-4 py-3">Computer Model</th>
                            <th className="px-4 py-3">Last Logon User</th>
                            <th className="px-4 py-3">Last Logon Date</th>
                            <th className="px-4 py-3">OS</th>
                            <th className="px-4 py-3">OS Version</th>
                            <th className="px-4 py-3">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {filteredHardware.map((row, index) => (
                            <tr key={index} className="bg-white dark:bg-gray-800 border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50">
                                {Object.keys(row).map(field => (
                                    <td key={field} className="px-2 py-1">
                                        <input 
                                            type="text"
                                            value={row[field]}
                                            onChange={(e) => handleHardwareChange(data.officeHardware.indexOf(row), field, e.target.value)}
                                            className="w-full bg-transparent border-none focus:ring-0 p-1 rounded focus:bg-gray-100 dark:focus:bg-gray-700"
                                        />
                                    </td>
                                ))}
                                <td className="px-4 py-2 text-center">
                                    <button onClick={() => removeRow(data.officeHardware.indexOf(row))} className="text-red-500 hover:text-red-700">
                                        <Trash2 size={18} />
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            <Button onClick={addRow} className="mt-4">
                <PlusCircle size={18} /> Add Row
            </Button>
        </Section>
    );
};

// Enhanced Data Closet Page with proper rack unit display
const DataClosetPage = ({ data, setData, currentUser }) => {
    const [isDeviceModalOpen, setDeviceModalOpen] = useState(false);
    const [currentRackTarget, setCurrentRackTarget] = useState({locationId: null, rackId: null});
    const [isDragging, setIsDragging] = useState(false);
    const [draggedDevice, setDraggedDevice] = useState(null);
    const [showImportDialog, setShowImportDialog] = useState(false);
    const [previousDataAvailable, setPreviousDataAvailable] = useState(false);
    const [previousData, setPreviousData] = useState(null);
    const [isLoadingPrevious, setIsLoadingPrevious] = useState(false);
    
    // Check for previous data on component mount
    useEffect(() => {
        checkForPreviousData();
    }, [data.office]);
    
    const checkForPreviousData = async () => {
        if (!data.office) return;
        
        setIsLoadingPrevious(true);
        try {
            // In production, this would make an API call to SQL database
            // Simulating API call to check for previous data
            const hasPreviousData = await new Promise((resolve) => {
                setTimeout(() => {
                    // Simulate finding previous data for this office
                    resolve(true);
                }, 500);
            });
            
            if (hasPreviousData) {
                // Simulate fetching previous data
                const previousDataFromSQL = {
                    deviceLocations: [
                        {
                            id: Date.now() - 1000,
                            name: "Main Data Closet",
                            devices: [
                                { id: Date.now() - 900, type: 'UPS', name: 'UPS1', serial: 'UPS123456', model: 'APC 1500', mac: '', lastTest: '2024-10-15', nicPort: '' },
                                { id: Date.now() - 800, type: 'PDU', name: 'PDU1', serial: 'PDU789012', model: 'APC Switched', mac: '00:11:22:33:44:55', lastTest: '2024-10-15', nicPort: 'Port 1' }
                            ]
                        }
                    ],
                    rackLocations: [
                        {
                            id: Date.now() - 700,
                            name: "Server Room A",
                            racks: [
                                {
                                    id: Date.now() - 600,
                                    name: "Rack 1",
                                    units: Array.from({ length: 45 }, (_, i) => ({ 
                                        unit: 45 - i, 
                                        deviceId: null, 
                                        isStart: false, 
                                        content: '', 
                                        color: '#ffffff', 
                                        size: 1 
                                    }))
                                }
                            ]
                        }
                    ],
                    lastUpdated: '2024-10-15',
                    updatedBy: 'john.doe@company.com'
                };
                
                // Add some sample devices to the rack
                const rack = previousDataFromSQL.rackLocations[0].racks[0];
                // Add a switch at unit 42-44
                for (let i = 0; i < 3; i++) {
                    const unitIndex = rack.units.findIndex(u => u.unit === 44 - i);
                    if (unitIndex !== -1) {
                        rack.units[unitIndex] = {
                            ...rack.units[unitIndex],
                            deviceId: 'device1',
                            isStart: i === 0,
                            content: i === 0 ? 'Core Switch' : '',
                            color: '#3b82f6',
                            size: i === 0 ? 3 : 1
                        };
                    }
                }
                
                setPreviousData(previousDataFromSQL);
                setPreviousDataAvailable(true);
                
                // Show import dialog if no current data exists
                if ((!data.dataCloset.deviceLocations || data.dataCloset.deviceLocations.length === 0) &&
                    (!data.dataCloset.rackLocations || data.dataCloset.rackLocations.length === 0)) {
                    setShowImportDialog(true);
                }
            }
        } catch (error) {
            console.error('Error checking for previous data:', error);
        } finally {
            setIsLoadingPrevious(false);
        }
    };
    
    const importPreviousData = (confirmNoChanges = false) => {
        if (!previousData) return;
        
        setData(prev => ({
            ...prev,
            dataCloset: {
                ...prev.dataCloset,
                deviceLocations: previousData.deviceLocations,
                rackLocations: previousData.rackLocations,
                noChangesSinceLast: confirmNoChanges
            }
        }));
        
        setShowImportDialog(false);
    };
    
    const handleGradingChange = (index, field, value) => {
        const newGrading = [...data.dataCloset.grading];
        newGrading[index][field] = value;
        setData(prev => ({ ...prev, dataCloset: { ...prev.dataCloset, grading: newGrading } }));
    };

    useEffect(() => {
        const scores = data.dataCloset.grading.map(g => g.score).filter(s => s !== '' && !isNaN(s));
        if (scores.length > 0) {
            const avg = scores.reduce((a, b) => a + Number(b), 0) / scores.length;
            const percentage = (avg / 5) * 100;
            setData(prev => ({ ...prev, dataCloset: { ...prev.dataCloset, score: `${percentage.toFixed(0)}%` } }));
        } else {
            setData(prev => ({ ...prev, dataCloset: { ...prev.dataCloset, score: 'N/A' } }));
        }
    }, [data.dataCloset.grading, setData]);
    
    // Device Information Logic
    const addDeviceLocation = () => {
        if (data.dataCloset.deviceLocations.length >= 6) return;
        const newLocation = {
            id: Date.now(),
            name: `New Location ${data.dataCloset.deviceLocations.length + 1}`,
            devices: []
        };
        setData(prev => ({ ...prev, dataCloset: { ...prev.dataCloset, deviceLocations: [...prev.dataCloset.deviceLocations, newLocation] } }));
    };
    
    const removeDeviceLocation = (locId) => {
        setData(prev => ({...prev, dataCloset: {...prev.dataCloset, deviceLocations: prev.dataCloset.deviceLocations.filter(l => l.id !== locId)}}));
    };

    const handleDeviceLocationNameChange = (locId, name) => {
        const newLocations = data.dataCloset.deviceLocations.map(loc => loc.id === locId ? { ...loc, name } : loc);
        setData(prev => ({ ...prev, dataCloset: { ...prev.dataCloset, deviceLocations: newLocations } }));
    };

    const addDevice = (locId, type) => {
        const newLocations = data.dataCloset.deviceLocations.map(loc => {
            if (loc.id === locId) {
                const deviceCount = loc.devices.filter(d => d.type === type).length;
                const newDevice = {
                    id: Date.now(), type, name: `${type}${deviceCount + 1}`,
                    serial: '', model: '', mac: '', lastTest: '', nicPort: ''
                };
                return { ...loc, devices: [...loc.devices, newDevice] };
            }
            return loc;
        });
        setData(prev => ({ ...prev, dataCloset: { ...prev.dataCloset, deviceLocations: newLocations } }));
    };
    
    const removeDevice = (locId, deviceId) => {
        const newLocations = data.dataCloset.deviceLocations.map(loc => {
            if (loc.id === locId) {
                return {...loc, devices: loc.devices.filter(d => d.id !== deviceId)};
            }
            return loc;
        });
        setData(prev => ({...prev, dataCloset: {...prev.dataCloset, deviceLocations: newLocations}}));
    };

    const handleDeviceChange = (locId, deviceId, field, value) => {
        const newLocations = data.dataCloset.deviceLocations.map(loc => {
            if (loc.id === locId) {
                const newDevices = loc.devices.map(dev => dev.id === deviceId ? { ...dev, [field]: value } : dev);
                return { ...loc, devices: newDevices };
            }
            return loc;
        });
        setData(prev => ({ ...prev, dataCloset: { ...prev.dataCloset, deviceLocations: newLocations } }));
    };

    // Rack Logic
    const addRackLocation = () => {
        const newLocation = {
            id: Date.now(),
            name: `Rack Location ${data.dataCloset.rackLocations.length + 1}`,
            racks: []
        };
        setData(prev => ({ ...prev, dataCloset: { ...prev.dataCloset, rackLocations: [...prev.dataCloset.rackLocations, newLocation] } }));
    };
    
    const removeRackLocation = (locId) => {
        const newLocations = data.dataCloset.rackLocations.filter(loc => loc.id !== locId);
        setData(prev => ({...prev, dataCloset: {...prev.dataCloset, rackLocations: newLocations}}));
    };

    const handleRackLocationNameChange = (locId, name) => {
        const newLocations = data.dataCloset.rackLocations.map(loc => loc.id === locId ? { ...loc, name } : loc);
        setData(prev => ({ ...prev, dataCloset: { ...prev.dataCloset, rackLocations: newLocations } }));
    };

    const addRack = (locId) => {
        const newLocations = data.dataCloset.rackLocations.map(loc => {
            if (loc.id === locId) {
                const newRack = {
                    id: Date.now(),
                    name: `Rack ${loc.racks.length + 1}`,
                    units: Array.from({ length: 45 }, (_, i) => ({ unit: 45 - i, deviceId: null, isStart: false, content: '', color: '#ffffff', size: 1 }))
                };
                return { ...loc, racks: [...loc.racks, newRack] };
            }
            return loc;
        });
        setData(prev => ({ ...prev, dataCloset: { ...prev.dataCloset, rackLocations: newLocations } }));
    };

    const openAddDeviceModal = (locationId, rackId) => {
        setCurrentRackTarget({locationId, rackId});
        setDeviceModalOpen(true);
    };

    const handleAddDeviceToRack = (device) => {
        const { locationId, rackId } = currentRackTarget;
        const { startUnit, size, name, color } = device;
        const deviceId = Date.now();

        const newLocations = data.dataCloset.rackLocations.map(loc => {
            if (loc.id === locationId) {
                const newRacks = loc.racks.map(rack => {
                    if (rack.id === rackId) {
                        const newUnits = [...rack.units];
                        
                        // Check for conflicts
                        for (let i = 0; i < size; i++) {
                            const unitIndex = newUnits.findIndex(u => u.unit === startUnit - i);
                            if (unitIndex !== -1 && newUnits[unitIndex].deviceId) {
                                alert('Selected units are already occupied!');
                                return rack;
                            }
                        }
                        
                        // Add device
                        for (let i = 0; i < size; i++) {
                            const unitIndex = newUnits.findIndex(u => u.unit === startUnit - i);
                            if (unitIndex !== -1) {
                                newUnits[unitIndex] = {
                                    ...newUnits[unitIndex],
                                    deviceId: deviceId,
                                    isStart: i === 0,
                                    content: i === 0 ? name : '',
                                    color: color,
                                    size: i === 0 ? size : 1,
                                };
                            }
                        }
                        return { ...rack, units: newUnits };
                    }
                    return rack;
                });
                return { ...loc, racks: newRacks };
            }
            return loc;
        });
        setData(prev => ({ ...prev, dataCloset: { ...prev.dataCloset, rackLocations: newLocations } }));
        setDeviceModalOpen(false);
    };

    const removeDeviceFromRack = (locationId, rackId, deviceId) => {
        const newLocations = data.dataCloset.rackLocations.map(loc => {
            if (loc.id === locationId) {
                const newRacks = loc.racks.map(rack => {
                    if (rack.id === rackId) {
                        const newUnits = rack.units.map(unit => 
                            unit.deviceId === deviceId 
                                ? { unit: unit.unit, deviceId: null, isStart: false, content: '', color: '#ffffff', size: 1 }
                                : unit
                        );
                        return { ...rack, units: newUnits };
                    }
                    return rack;
                });
                return { ...loc, racks: newRacks };
            }
            return loc;
        });
        setData(prev => ({ ...prev, dataCloset: { ...prev.dataCloset, rackLocations: newLocations } }));
    };

    const getRackSpaceInfo = (rack) => {
        const occupied = rack.units.filter(u => u.deviceId).length;
        const total = rack.units.length;
        const available = total - occupied;
        const percentage = Math.round((occupied / total) * 100);
        return { occupied, total, available, percentage };
    };

    const renderRackUnits = (locationId, rack) => {
        const spaceInfo = getRackSpaceInfo(rack);
        const renderedUnits = [];
        
        let i = 0;
        while (i < rack.units.length) {
            const unit = rack.units[i];
            
            if (unit.deviceId && unit.isStart) {
                // This is the start of a device
                const deviceUnits = [];
                const deviceId = unit.deviceId;
                const deviceColor = unit.color;
                const deviceName = unit.content;
                
                // Collect all units for this device
                let j = i;
                while (j < rack.units.length && rack.units[j].deviceId === deviceId) {
                    deviceUnits.push(rack.units[j].unit);
                    j++;
                }
                
                const deviceHeight = deviceUnits.length * 28; // 28px per unit
                
                renderedUnits.push(
                    <div key={`device-${deviceId}`} className="relative group" style={{height: `${deviceHeight}px`}}>
                        <div className="absolute left-0 top-0 bottom-0 w-8 flex flex-col">
                            {deviceUnits.map((unitNum, idx) => (
                                <div key={unitNum} className="flex-1 text-right font-mono text-xs text-gray-500 dark:text-gray-400 pr-2 flex items-center justify-end" style={{height: '28px'}}>
                                    {unitNum}
                                </div>
                            ))}
                        </div>
                        <div className="ml-10 h-full border-2 border-gray-600 dark:border-gray-400 rounded-sm flex items-center justify-center text-white font-bold text-sm p-2 relative overflow-hidden" 
                             style={{backgroundColor: deviceColor}}>
                            <span className="z-10">{deviceName}</span>
                            {/* Unit lines for multi-U devices */}
                            {deviceUnits.length > 1 && (
                                <div className="absolute inset-0">
                                    {deviceUnits.slice(1).map((_, idx) => (
                                        <div key={idx} className="absolute w-full border-t border-gray-400 opacity-30" 
                                             style={{top: `${(idx + 1) * 28}px`}}></div>
                                    ))}
                                </div>
                            )}
                            <button
                                onClick={() => removeDeviceFromRack(locationId, rack.id, deviceId)}
                                className="absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity bg-black bg-opacity-50 rounded p-1 z-20"
                            >
                                <X size={14} />
                            </button>
                        </div>
                    </div>
                );
                
                i = j; // Skip the units we just processed
            } else if (!unit.deviceId) {
                // Empty unit
                renderedUnits.push(
                    <div key={`empty-${unit.unit}`} className="flex items-center h-7">
                        <div className="w-8 text-right font-mono text-xs text-gray-500 dark:text-gray-400">{unit.unit}</div>
                        <div className="ml-2 flex-1 border border-dashed border-gray-300 dark:border-gray-600 rounded-sm h-6"></div>
                    </div>
                );
                i++;
            } else {
                // This shouldn't happen in a well-formed rack, but skip it
                i++;
            }
        }
        
        return (
            <div>
                <div className="mb-2 text-xs text-gray-600 dark:text-gray-400">
                    Space: {spaceInfo.available}U available ({spaceInfo.percentage}% used)
                </div>
                <div className="space-y-1">{renderedUnits}</div>
            </div>
        );
    };

    const scoreOptions = [1, 2, 3, 4, 5];

    return (
        <Section 
          title="Data Closet" 
          icon={<Server className="text-purple-500" size={32} />}
          helpText="Document and grade your data closet infrastructure. Add devices, manage rack layouts, and track equipment details."
        >
            {/* Import Previous Data Banner */}
            {previousDataAvailable && !showImportDialog && 
             (!data.dataCloset.deviceLocations || data.dataCloset.deviceLocations.length === 0) && 
             (!data.dataCloset.rackLocations || data.dataCloset.rackLocations.length === 0) && (
                <Alert variant="info">
                    <div className="flex items-center justify-between">
                        <div>
                            <p className="font-semibold">Previous data closet configuration found</p>
                            <p className="text-sm mt-1">Last updated: {previousData?.lastUpdated} by {previousData?.updatedBy}</p>
                        </div>
                        <Button onClick={() => setShowImportDialog(true)} variant="primary">
                            Import Previous Data
                        </Button>
                    </div>
                </Alert>
            )}
            
            <div className="mb-12">
                <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200 mb-4">Data Closet Grading</h3>
                <div className="space-y-4">
                    {data.dataCloset.grading.map((item, index) => (
                        <div key={index} className="grid grid-cols-1 md:grid-cols-12 gap-4 items-center bg-gray-50 dark:bg-gray-700/50 p-4 rounded-lg">
                            <div className="md:col-span-3 font-semibold text-gray-700 dark:text-gray-200">{item.category}</div>
                            <div className="md:col-span-2">
                                <Select value={item.score} onChange={e => handleGradingChange(index, 'score', e.target.value)}>
                                    <option value="">N/A</option>
                                    {scoreOptions.map(s => <option key={s} value={s}>{s}</option>)}
                                </Select>
                            </div>
                            <div className="md:col-span-7">
                                <Input type="text" multiline value={item.comments} onChange={e => handleGradingChange(index, 'comments', e.target.value)} placeholder="Comments..."/>
                            </div>
                        </div>
                    ))}
                </div>
                <div className="mt-6 bg-purple-100 dark:bg-purple-900/30 border-l-4 border-purple-500 text-purple-700 dark:text-purple-300 p-4 rounded-r-lg flex justify-between items-center">
                    <span className="text-xl font-bold">Data Closet Score:</span>
                    <span className="text-3xl font-extrabold">{data.dataCloset.score}</span>
                </div>
            </div>
            
            <div className="mb-12">
                <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200 mb-4">Device Information</h3>
                {data.dataCloset.noChangesSinceLast && (
                    <Alert variant="success">
                        <CheckCircle className="inline mr-2" size={16} />
                        Device configuration confirmed unchanged from last visit
                    </Alert>
                )}
                {data.dataCloset.deviceLocations.map(loc => (
                    <div key={loc.id} className="mb-8 p-6 border border-gray-200 dark:border-gray-700 rounded-lg">
                        <div className="flex justify-between items-center mb-4">
                            <Input type="text" value={loc.name} onChange={(e) => handleDeviceLocationNameChange(loc.id, e.target.value)} className="text-lg font-semibold !p-1 !border-transparent focus:!border-gray-300" />
                            <Button onClick={() => removeDeviceLocation(loc.id)} variant="danger"><Trash2 size={16} /></Button>
                        </div>
                        <div className="flex space-x-2 mb-4">
                            <Button onClick={() => addDevice(loc.id, 'UPS')}><PlusCircle size={16} /> Add UPS</Button>
                            <Button onClick={() => addDevice(loc.id, 'PDU')}><PlusCircle size={16} /> Add PDU</Button>
                            <Button onClick={() => addDevice(loc.id, 'Camera')}><PlusCircle size={16} /> Add Camera</Button>
                        </div>
                        <div className="overflow-x-auto">
                            <table className="w-full text-sm">
                                <thead className="text-xs text-gray-700 dark:text-gray-300 uppercase bg-gray-50 dark:bg-gray-700">
                                    <tr>
                                        <th className="px-4 py-3">Device</th>
                                        <th className="px-4 py-3">Serial Number</th>
                                        <th className="px-4 py-3">Model</th>
                                        <th className="px-4 py-3">MAC Address</th>
                                        <th className="px-4 py-3">Last Test</th>
                                        <th className="px-4 py-3">NIC Port</th>
                                        <th className="px-4 py-3"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {loc.devices.map(dev => (
                                        <tr key={dev.id} className="bg-white dark:bg-gray-800 border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50">
                                            <td className="px-4 py-2 font-medium text-gray-900 dark:text-gray-200">{dev.name}</td>
                                            <td className="px-4 py-2"><Input type="text" value={dev.serial} onChange={e => handleDeviceChange(loc.id, dev.id, 'serial', e.target.value)} className="w-full p-1"/></td>
                                            <td className="px-4 py-2"><Input type="text" value={dev.model} onChange={e => handleDeviceChange(loc.id, dev.id, 'model', e.target.value)} className="w-full p-1"/></td>
                                            <td className="px-4 py-2"><Input type="text" value={dev.mac} onChange={e => handleDeviceChange(loc.id, dev.id, 'mac', e.target.value)} className="w-full p-1"/></td>
                                            <td className="px-4 py-2"><Input type="date" value={dev.lastTest} onChange={e => handleDeviceChange(loc.id, dev.id, 'lastTest', e.target.value)} className="w-full p-1"/></td>
                                            <td className="px-4 py-2"><Input type="text" value={dev.nicPort} onChange={e => handleDeviceChange(loc.id, dev.id, 'nicPort', e.target.value)} className="w-full p-1"/></td>
                                            <td className="px-4 py-2"><button onClick={() => removeDevice(loc.id, dev.id)} className="text-red-500 hover:text-red-700"><Trash2 size={16} /></button></td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    </div>
                ))}
                {data.dataCloset.deviceLocations.length < 6 && <Button onClick={addDeviceLocation}><PlusCircle size={18} /> Add Location</Button>}
            </div>

            <div className="mb-12">
                <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200 mb-4">Rack Management</h3>
                {data.dataCloset.noChangesSinceLast && (
                    <Alert variant="success">
                        <CheckCircle className="inline mr-2" size={16} />
                        Rack configuration confirmed unchanged from last visit
                    </Alert>
                )}
                {data.dataCloset.rackLocations.map(loc => (
                    <div key={loc.id} className="mb-8 p-6 border border-gray-200 dark:border-gray-700 rounded-lg">
                         <div className="flex justify-between items-center mb-4">
                            <Input type="text" value={loc.name} onChange={e => handleRackLocationNameChange(loc.id, e.target.value)} className="text-lg font-semibold !p-1 !border-transparent focus:!border-gray-300" />
                            <div className="flex items-center space-x-2">
                                <Button onClick={() => addRack(loc.id)}><PlusCircle size={16}/> Add Rack</Button>
                                <Button onClick={() => removeRackLocation(loc.id)} variant="danger"><Trash2 size={16}/></Button>
                            </div>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                            {loc.racks.map(rack => (
                                <div key={rack.id} className="bg-gray-50 dark:bg-gray-900/50 p-4 rounded-lg shadow-md">
                                    <div className="flex justify-between items-center mb-4">
                                        <h4 className="font-bold text-lg text-gray-800 dark:text-gray-100">{rack.name}</h4>
                                        <Button onClick={() => openAddDeviceModal(loc.id, rack.id)} variant="secondary"><PlusCircle size={14}/> Add Device</Button>
                                    </div>
                                    {renderRackUnits(loc.id, rack)}
                                </div>
                            ))}
                        </div>
                    </div>
                ))}
                <Button onClick={addRackLocation}><PlusCircle size={18} /> Add Rack Location</Button>
            </div>
            
            <AddDeviceToRackModal 
                isOpen={isDeviceModalOpen}
                onClose={() => setDeviceModalOpen(false)}
                onAddDevice={handleAddDeviceToRack}
                colors={RACK_COLORS}
                currentRack={currentRackTarget}
                data={data}
            />
            
            {/* Import Previous Data Modal */}
            <Modal isOpen={showImportDialog} onClose={() => setShowImportDialog(false)} title="Import Previous Data Closet Configuration">
                <div className="space-y-4">
                    <Alert variant="info">
                        Previous configuration found for {data.office} office
                    </Alert>
                    
                    <div className="bg-gray-50 dark:bg-gray-800/50 p-4 rounded-lg">
                        <p className="font-semibold mb-2">Previous Visit Details:</p>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                            Last Updated: {previousData?.lastUpdated}<br />
                            Updated By: {previousData?.updatedBy}
                        </p>
                    </div>
                    
                    {previousData && (
                        <div className="space-y-2">
                            <p className="font-semibold">Configuration Summary:</p>
                            <ul className="text-sm space-y-1 text-gray-600 dark:text-gray-400">
                                <li>• Device Locations: {previousData.deviceLocations.length}</li>
                                <li>• Total Devices: {previousData.deviceLocations.reduce((sum, loc) => sum + loc.devices.length, 0)}</li>
                                <li>• Rack Locations: {previousData.rackLocations.length}</li>
                                <li>• Total Racks: {previousData.rackLocations.reduce((sum, loc) => sum + loc.racks.length, 0)}</li>
                            </ul>
                        </div>
                    )}
                    
                    <div className="space-y-3">
                        <Button onClick={() => importPreviousData(true)} variant="primary" className="w-full">
                            <CheckCircle size={18} /> Import and Confirm No Changes
                        </Button>
                        <Button onClick={() => importPreviousData(false)} variant="secondary" className="w-full">
                            <Download size={18} /> Import as Starting Point
                        </Button>
                        <Button onClick={() => setShowImportDialog(false)} variant="ghost" className="w-full">
                            Start Fresh
                        </Button>
                    </div>
                    
                    <p className="text-xs text-gray-500 dark:text-gray-400 text-center">
                        Importing will replace any current device and rack data
                    </p>
                </div>
            </Modal>
        </Section>
    );
};

const AddDeviceToRackModal = ({isOpen, onClose, onAddDevice, colors, currentRack, data}) => {
    const [name, setName] = useState('');
    const [size, setSize] = useState(1);
    const [startUnit, setStartUnit] = useState(45);
    const [color, setColor] = useState(colors[0]);

    const handleSubmit = () => {
        if (!name.trim()) {
            alert('Please enter a device name');
            return;
        }
        onAddDevice({name, size: Number(size), startUnit: Number(startUnit), color});
        setName(''); setSize(1); setStartUnit(45); setColor(colors[0]);
    };

    // Get available units
    const getAvailableUnits = () => {
        if (!currentRack.locationId || !currentRack.rackId) return [];
        
        const location = data.dataCloset.rackLocations.find(loc => loc.id === currentRack.locationId);
        if (!location) return [];
        
        const rack = location.racks.find(r => r.id === currentRack.rackId);
        if (!rack) return [];
        
        return rack.units.filter(u => !u.deviceId).map(u => u.unit);
    };

    const availableUnits = getAvailableUnits();

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="Add Device to Rack">
            <div className="space-y-4">
                <Input label="Device Name *" value={name} onChange={e => setName(e.target.value)} placeholder="e.g., Switch-01" />
                <Input label="Device Size (U)" type="number" min="1" max="45" value={size} onChange={e => setSize(e.target.value)} />
                <div>
                    <label className="block text-sm font-medium text-gray-600 dark:text-gray-300 mb-1">Starting Unit (Top)</label>
                    <select 
                        value={startUnit} 
                        onChange={e => setStartUnit(Number(e.target.value))}
                        className="w-full px-4 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded-lg"
                    >
                        {availableUnits.map(unit => (
                            <option key={unit} value={unit}>Unit {unit}</option>
                        ))}
                    </select>
                    <p className="text-xs text-gray-500 mt-1">{availableUnits.length} units available</p>
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-600 dark:text-gray-300 mb-1">Color</label>
                    <div className="flex flex-wrap gap-2">
                        {colors.map(c => (
                            <button key={c} onClick={() => setColor(c)} className={`w-8 h-8 rounded-full border-2 ${color === c ? 'border-blue-500 ring-2 ring-blue-500' : 'border-gray-300'}`} style={{backgroundColor: c}}></button>
                        ))}
                    </div>
                </div>
                <div className="pt-4 flex justify-end">
                    <Button onClick={handleSubmit}>Add Device</Button>
                </div>
            </div>
        </Modal>
    );
}

// Enhanced Inventory Page with email functionality
const InventoryPage = ({ data, setData, onSendReport, currentUser }) => {
    const [filter, setFilter] = useState('all');
    const [sortBy, setSortBy] = useState('description');
    const [showEmailModal, setShowEmailModal] = useState(false);
    
    const handleItemChange = (index, field, value) => {
        const newItems = [...data.inventory.items];
        const val = value === '' ? 0 : Math.max(0, parseInt(value, 10));
        if (!isNaN(val)) {
            newItems[index][field] = val;
            setData(prev => ({ ...prev, inventory: { ...prev.inventory, items: newItems } }));
        }
    };
    
    const handleNestedItemChange = (index, category, field, value) => {
        const newItems = [...data.inventory.items];
        const val = value === '' ? 0 : Math.max(0, parseInt(value, 10));
        if (!isNaN(val)) {
            newItems[index][category][field] = val;
            setData(prev => ({ ...prev, inventory: { ...prev.inventory, items: newItems } }));
        }
    };
    
    const handleSpecialStationChange = (field, value) => {
        const val = value === '' ? 0 : Math.max(0, parseInt(value, 10));
        if (!isNaN(val)) {
            setData(prev => ({ 
                ...prev, 
                inventory: { 
                    ...prev.inventory, 
                    specialStations: { 
                        ...prev.inventory.specialStations, 
                        [field]: val 
                    } 
                } 
            }));
        }
    };

    const calculatedItems = data.inventory.items.map(item => {
        const totalOtherUse = Object.values(item.otherUse).reduce((sum, val) => sum + val, 0);
        const totalSpares = Object.values(item.spares).reduce((sum, val) => sum + val, 0);
        const total = item.inUse + totalOtherUse + totalSpares + item.broken;
        return { ...item, totalOtherUse, totalSpares, total };
    });
    
    const filteredItems = calculatedItems.filter(item => {
        if (filter === 'all') return true;
        if (filter === 'inUse') return item.inUse > 0;
        if (filter === 'spares') return item.totalSpares > 0;
        if (filter === 'broken') return item.broken > 0;
        return true;
    });

    const handleFocus = (e) => e.target.select();

    const exportInventory = () => {
        const headers = [
            'Description', 'In Use', 'Training', 'Conf Room', 'GSM Office',
            'Prospecting', 'Applicant', 'Visitor', 'Other', 'Total Other Use',
            'Spares (Floor)', 'Spares (Storage)', 'Total Spares', 'Broken', 'Grand Total'
        ];
        
        const csvContent = [
            headers.join(','),
            ...calculatedItems.map(item => [
                item.description,
                item.inUse,
                item.otherUse.training,
                item.otherUse.conf,
                item.otherUse.gsm,
                item.otherUse.prospecting,
                item.otherUse.applicant,
                item.otherUse.visitor,
                item.otherUse.other,
                item.totalOtherUse,
                item.spares.onFloor,
                item.spares.inStorage,
                item.totalSpares,
                item.broken,
                item.total
            ].join(',')),
            '', // Empty line
            'Special Station Counts',
            `Three Monitor Setups,${data.inventory.specialStations?.threeMonitorSetups || 0}`,
            `Prospecting Stations,${data.inventory.specialStations?.prospectingStations || 0}`,
            `Visitor Stations,${data.inventory.specialStations?.visitorStations || 0}`,
            `Applicant Stations,${data.inventory.specialStations?.applicantStations || 0}`,
            `EOL Computers,${data.inventory.specialStations?.eolComputers || 0}`
        ].join('\n');
        
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `inventory_${data.office}_${data.date}.csv`;
        a.click();
    };

    const handleSendEmail = (emailData) => {
        // In a real implementation, this would send the email via backend
        console.log('Sending inventory email:', emailData);
        console.log('From:', currentUser);
        console.log('PDF would contain inventory data for:', data.office);
        console.log('Special Stations:', data.inventory.specialStations);
        
        onSendReport(emailData);
    };

    return (
        <Section 
          title="Office Inventory" 
          icon={<Warehouse className="text-orange-500" size={32} />}
          helpText="Track all equipment inventory across different locations and categories. Totals are calculated automatically."
        >
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <Input label="Location" value={data.office} readOnly disabled />
                <Input label="Date" type="date" value={data.date} readOnly disabled />
                <Input label="Recorded By" value={data.rss} readOnly disabled />
            </div>

            <div className="flex justify-between items-center mb-4">
                <div className="flex items-center space-x-2">
                    <Filter className="text-gray-400" size={20} />
                    <Select value={filter} onChange={(e) => setFilter(e.target.value)}>
                        <option value="all">All Items</option>
                        <option value="inUse">In Use Only</option>
                        <option value="spares">With Spares</option>
                        <option value="broken">Broken Items</option>
                    </Select>
                </div>
                <Button onClick={exportInventory} variant="secondary">
                    <FileSpreadsheet size={18} /> Export CSV
                </Button>
            </div>

            <div className="overflow-x-auto">
                <table className="w-full text-sm text-left">
                    <thead className="text-xs text-gray-700 dark:text-gray-300 uppercase bg-gray-100 dark:bg-gray-700">
                        <tr>
                            <th rowSpan="2" className="px-2 py-3 border dark:border-gray-600">Description</th>
                            <th rowSpan="2" className="px-2 py-3 border dark:border-gray-600">In Use by Employees</th>
                            <th colSpan="7" className="px-2 py-3 border dark:border-gray-600 text-center">Other Use</th>
                            <th rowSpan="2" className="px-2 py-3 border dark:border-gray-600 bg-blue-50 dark:bg-blue-900/50">Total Other Use</th>
                            <th colSpan="2" className="px-2 py-3 border dark:border-gray-600 text-center">Inventory Not in Use</th>
                            <th rowSpan="2" className="px-2 py-3 border dark:border-gray-600 bg-blue-50 dark:bg-blue-900/50">Total Spares</th>
                            <th rowSpan="2" className="px-2 py-3 border dark:border-gray-600">Broken</th>
                            <th rowSpan="2" className="px-2 py-3 border dark:border-gray-600 bg-green-50 dark:bg-green-900/50">Grand Total</th>
                        </tr>
                        <tr>
                            <th className="px-2 py-3 border dark:border-gray-600">Training</th>
                            <th className="px-2 py-3 border dark:border-gray-600">Conf Room</th>
                            <th className="px-2 py-3 border dark:border-gray-600">GSM Office</th>
                            <th className="px-2 py-3 border dark:border-gray-600">Prospecting</th>
                            <th className="px-2 py-3 border dark:border-gray-600">Applicant</th>
                            <th className="px-2 py-3 border dark:border-gray-600">Visitor</th>
                            <th className="px-2 py-3 border dark:border-gray-600">Other</th>
                            <th className="px-2 py-3 border dark:border-gray-600">Spares (Floor)</th>
                            <th className="px-2 py-3 border dark:border-gray-600">Spares (Storage)</th>
                        </tr>
                    </thead>
                    <tbody>
                        {filteredItems.map((item, index) => {
                            const originalIndex = data.inventory.items.findIndex(i => i.description === item.description);
                            return (
                                <tr key={index} className="bg-white dark:bg-gray-800 border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50">
                                    <td className="px-2 py-2 border dark:border-gray-600 font-medium text-gray-900 dark:text-gray-200">{item.description}</td>
                                    <td className="px-2 py-2 border dark:border-gray-600"><input type="number" min="0" value={item.inUse} onChange={e => handleItemChange(originalIndex, 'inUse', e.target.value)} onFocus={handleFocus} className="w-20 p-1 text-center bg-transparent focus:bg-yellow-100 dark:focus:bg-yellow-800 rounded" /></td>
                                    <td className="px-2 py-2 border dark:border-gray-600"><input type="number" min="0" value={item.otherUse.training} onChange={e => handleNestedItemChange(originalIndex, 'otherUse', 'training', e.target.value)} onFocus={handleFocus} className="w-20 p-1 text-center bg-transparent focus:bg-yellow-100 dark:focus:bg-yellow-800 rounded" /></td>
                                    <td className="px-2 py-2 border dark:border-gray-600"><input type="number" min="0" value={item.otherUse.conf} onChange={e => handleNestedItemChange(originalIndex, 'otherUse', 'conf', e.target.value)} onFocus={handleFocus} className="w-20 p-1 text-center bg-transparent focus:bg-yellow-100 dark:focus:bg-yellow-800 rounded" /></td>
                                    <td className="px-2 py-2 border dark:border-gray-600"><input type="number" min="0" value={item.otherUse.gsm} onChange={e => handleNestedItemChange(originalIndex, 'otherUse', 'gsm', e.target.value)} onFocus={handleFocus} className="w-20 p-1 text-center bg-transparent focus:bg-yellow-100 dark:focus:bg-yellow-800 rounded" /></td>
                                    <td className="px-2 py-2 border dark:border-gray-600"><input type="number" min="0" value={item.otherUse.prospecting} onChange={e => handleNestedItemChange(originalIndex, 'otherUse', 'prospecting', e.target.value)} onFocus={handleFocus} className="w-20 p-1 text-center bg-transparent focus:bg-yellow-100 dark:focus:bg-yellow-800 rounded" /></td>
                                    <td className="px-2 py-2 border dark:border-gray-600"><input type="number" min="0" value={item.otherUse.applicant} onChange={e => handleNestedItemChange(originalIndex, 'otherUse', 'applicant', e.target.value)} onFocus={handleFocus} className="w-20 p-1 text-center bg-transparent focus:bg-yellow-100 dark:focus:bg-yellow-800 rounded" /></td>
                                    <td className="px-2 py-2 border dark:border-gray-600"><input type="number" min="0" value={item.otherUse.visitor} onChange={e => handleNestedItemChange(originalIndex, 'otherUse', 'visitor', e.target.value)} onFocus={handleFocus} className="w-20 p-1 text-center bg-transparent focus:bg-yellow-100 dark:focus:bg-yellow-800 rounded" /></td>
                                    <td className="px-2 py-2 border dark:border-gray-600"><input type="number" min="0" value={item.otherUse.other} onChange={e => handleNestedItemChange(originalIndex, 'otherUse', 'other', e.target.value)} onFocus={handleFocus} className="w-20 p-1 text-center bg-transparent focus:bg-yellow-100 dark:focus:bg-yellow-800 rounded" /></td>
                                    <td className="px-2 py-2 border dark:border-gray-600 bg-blue-50 dark:bg-blue-900/50 text-center font-bold">{item.totalOtherUse}</td>
                                    <td className="px-2 py-2 border dark:border-gray-600"><input type="number" min="0" value={item.spares.onFloor} onChange={e => handleNestedItemChange(originalIndex, 'spares', 'onFloor', e.target.value)} onFocus={handleFocus} className="w-20 p-1 text-center bg-transparent focus:bg-yellow-100 dark:focus:bg-yellow-800 rounded" /></td>
                                    <td className="px-2 py-2 border dark:border-gray-600"><input type="number" min="0" value={item.spares.inStorage} onChange={e => handleNestedItemChange(originalIndex, 'spares', 'inStorage', e.target.value)} onFocus={handleFocus} className="w-20 p-1 text-center bg-transparent focus:bg-yellow-100 dark:focus:bg-yellow-800 rounded" /></td>
                                    <td className="px-2 py-2 border dark:border-gray-600 bg-blue-50 dark:bg-blue-900/50 text-center font-bold">{item.totalSpares}</td>
                                    <td className="px-2 py-2 border dark:border-gray-600"><input type="number" min="0" value={item.broken} onChange={e => handleItemChange(originalIndex, 'broken', e.target.value)} onFocus={handleFocus} className="w-20 p-1 text-center bg-transparent focus:bg-yellow-100 dark:focus:bg-yellow-800 rounded" /></td>
                                    <td className="px-2 py-2 border dark:border-gray-600 bg-green-50 dark:bg-green-900/50 text-center font-bold text-lg">{item.total}</td>
                                </tr>
                            );
                        })}
                    </tbody>
                </table>
            </div>
            
            {/* Special Stations Section */}
            <div className="mt-8 p-6 bg-gray-50 dark:bg-gray-800/50 rounded-lg border-2 border-gray-200 dark:border-gray-700">
                <div className="flex items-center space-x-3 mb-6">
                    <div className="p-2 bg-orange-100 dark:bg-orange-900/30 rounded-lg">
                        <Monitor className="text-orange-600 dark:text-orange-400" size={24} />
                    </div>
                    <div>
                        <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200">Special Station Counts</h3>
                        <p className="text-sm text-gray-500 dark:text-gray-400">Track specific workstation configurations and EOL equipment</p>
                    </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div className="bg-white dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600">
                        <div className="flex items-center space-x-2 mb-2">
                            <Monitor className="text-blue-500" size={20} />
                            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Three Monitor Setups</label>
                        </div>
                        <input
                            type="number"
                            min="0"
                            value={data.inventory.specialStations?.threeMonitorSetups || 0}
                            onChange={(e) => handleSpecialStationChange('threeMonitorSetups', e.target.value)}
                            onFocus={handleFocus}
                            className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 text-center text-lg font-semibold"
                        />
                    </div>
                    <div className="bg-white dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600">
                        <div className="flex items-center space-x-2 mb-2">
                            <Users className="text-green-500" size={20} />
                            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Prospecting Stations</label>
                        </div>
                        <input
                            type="number"
                            min="0"
                            value={data.inventory.specialStations?.prospectingStations || 0}
                            onChange={(e) => handleSpecialStationChange('prospectingStations', e.target.value)}
                            onFocus={handleFocus}
                            className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 text-center text-lg font-semibold"
                        />
                    </div>
                    <div className="bg-white dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600">
                        <div className="flex items-center space-x-2 mb-2">
                            <Users className="text-purple-500" size={20} />
                            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Visitor Stations</label>
                        </div>
                        <input
                            type="number"
                            min="0"
                            value={data.inventory.specialStations?.visitorStations || 0}
                            onChange={(e) => handleSpecialStationChange('visitorStations', e.target.value)}
                            onFocus={handleFocus}
                            className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 text-center text-lg font-semibold"
                        />
                    </div>
                    <div className="bg-white dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600">
                        <div className="flex items-center space-x-2 mb-2">
                            <Users className="text-indigo-500" size={20} />
                            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Applicant Stations</label>
                        </div>
                        <input
                            type="number"
                            min="0"
                            value={data.inventory.specialStations?.applicantStations || 0}
                            onChange={(e) => handleSpecialStationChange('applicantStations', e.target.value)}
                            onFocus={handleFocus}
                            className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 text-center text-lg font-semibold"
                        />
                    </div>
                    <div className="bg-white dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600">
                        <div className="flex items-center space-x-2 mb-2">
                            <AlertCircle className="text-red-500" size={20} />
                            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">EOL Computers</label>
                        </div>
                        <input
                            type="number"
                            min="0"
                            value={data.inventory.specialStations?.eolComputers || 0}
                            onChange={(e) => handleSpecialStationChange('eolComputers', e.target.value)}
                            onFocus={handleFocus}
                            className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 text-center text-lg font-semibold"
                        />
                    </div>
                </div>
            </div>
            
            <div className="mt-8 flex justify-end">
                <Button onClick={() => setShowEmailModal(true)} variant="secondary">
                    <Mail size={18} /> Send Inventory Report to Purchasing
                </Button>
            </div>
            
            <EmailModal
                isOpen={showEmailModal}
                onClose={() => setShowEmailModal(false)}
                onSend={handleSendEmail}
                type="inventory"
                recipients={EMAIL_RECIPIENTS.inventory}
                data={data}
            />
        </Section>
    );
};

const RecyclingPage = ({ data, setData }) => {
    const handleTableChange = (table, index, value) => {
        const newTableData = [...data.recycling[table]];
        const val = value === '' ? 0 : Math.max(0, parseInt(value, 10));
        if (!isNaN(val)) {
            newTableData[index].quantity = val;
            setData(prev => ({ ...prev, recycling: { ...prev.recycling, [table]: newTableData } }));
        }
    };

    const handleScheduleChange = (field, value) => {
        setData(prev => ({ ...prev, recycling: { ...prev.recycling, [field]: value } }));
    };

    const RecyclingTable = ({ title, items, tableKey }) => (
        <div className="mb-8">
            <h4 className="font-bold text-gray-700 dark:text-gray-200 mb-2">{title}</h4>
            <div className="space-y-2">
                {items.map((item, index) => (
                    <div key={index} className="grid grid-cols-3 gap-4 items-center">
                        <label className="col-span-2 text-sm text-gray-600 dark:text-gray-300">{item.item}</label>
                        <input
                            type="number"
                            min="0"
                            value={item.quantity}
                            onChange={e => handleTableChange(tableKey, index, e.target.value)}
                            className="w-full px-3 py-1 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg"
                            placeholder="Qty"
                        />
                    </div>
                ))}
            </div>
        </div>
    );

    return (
        <Section title="Recycling" icon={<Recycle className="text-teal-500" size={32} />}>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                <RecyclingTable title="Brought Back to Home Office" items={data.recycling.broughtBack} tableKey="broughtBack" />
                <RecyclingTable title="Remote Office Pickup Required" items={data.recycling.pickupRequired} tableKey="pickupRequired" />
                <RecyclingTable title="Sent to HQ" items={data.recycling.sentToHq} tableKey="sentToHq" />
            </div>
            <div className="mt-4 pt-4 border-t dark:border-gray-700">
                <h4 className="font-bold text-gray-700 dark:text-gray-200 mb-2">Recycling Scheduled?</h4>
                <div className="flex items-center space-x-6">
                    <Select value={data.recycling.scheduled} onChange={e => handleScheduleChange('scheduled', e.target.value)}>
                        <option value="No">No</option>
                        <option value="Yes">Yes</option>
                    </Select>
                    {data.recycling.scheduled === 'Yes' && (
                        <Input label="Date:" type="date" value={data.recycling.scheduleDate} onChange={e => handleScheduleChange('scheduleDate', e.target.value)} />
                    )}
                </div>
            </div>
        </Section>
    );
};

// Main App Component with persistence and validation
export default function App() {
    const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'light');
    const [activePage, setActivePage] = useState('Dashboard');
    const [isLoading, setIsLoading] = useState(false);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [modalContent, setModalContent] = useState({ title: '', body: '' });
    const [errors, setErrors] = useState({});
    const [showExportOptions, setShowExportOptions] = useState(false);
    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, onConfirm: () => {}, title: '', message: '' });
    const [showFullReportEmail, setShowFullReportEmail] = useState(false);
    
    // Simulated Windows user
    const [currentUser, setCurrentUser] = useState(() => {
        // In a real implementation, this would come from Windows authentication
        return localStorage.getItem('currentUser') || 'john.doe@company.com';
    });

    useEffect(() => {
        localStorage.setItem('theme', theme);
        if (theme === 'dark') {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
    }, [theme]);

    const toggleTheme = () => {
        setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');
    };
    
    const initialData = {
        rss: '', office: '', date: new Date().toISOString().split('T')[0], nextVisit: '',
        summary: { summaryText: '', pcRepairsText: '', trainingRoomText: '', issuesText: '', recommendationsText: '', followUpText: '' },
        pictures: { dataCloset: [], trainingRoom: [] },
        officeGrading: [
            { category: 'IT Relationship', score: '', comments: '' },
            { category: 'Inventory', score: '', comments: '' },
            { category: 'Sales Floor - IT Experience', score: '', comments: '' },
            { category: 'Data Closet', score: '', comments: '' },
        ],
        officeGrade: 'N/A',
        officeHardware: [],
        dataCloset: {
            grading: [
                { category: 'Data Closet Appearance', score: '', comments: '' },
                { category: 'Cable Management', score: '', comments: '' },
                { category: 'Labeling', score: '', comments: '' },
                { category: 'Temperature', score: '', comments: '' },
                { category: 'Physical Security', score: '', comments: '' },
                { category: 'Device Health', score: '', comments: '' },
            ],
            score: 'N/A',
            deviceLocations: [],
            rackLocations: [],
        },
        inventory: {
            items: [
                { description: 'PCs', inUse: 0, otherUse: { training: 0, conf: 0, gsm: 0, prospecting: 0, applicant: 0, visitor: 0, other: 0 }, spares: { onFloor: 0, inStorage: 0 }, broken: 0 },
                { description: 'Laptops', inUse: 0, otherUse: { training: 0, conf: 0, gsm: 0, prospecting: 0, applicant: 0, visitor: 0, other: 0 }, spares: { onFloor: 0, inStorage: 0 }, broken: 0 },
                { description: 'Monitors', inUse: 0, otherUse: { training: 0, conf: 0, gsm: 0, prospecting: 0, applicant: 0, visitor: 0, other: 0 }, spares: { onFloor: 0, inStorage: 0 }, broken: 0 },
                { description: 'Webcams', inUse: 0, otherUse: { training: 0, conf: 0, gsm: 0, prospecting: 0, applicant: 0, visitor: 0, other: 0 }, spares: { onFloor: 0, inStorage: 0 }, broken: 0 },
                { description: 'Phones', inUse: 0, otherUse: { training: 0, conf: 0, gsm: 0, prospecting: 0, applicant: 0, visitor: 0, other: 0 }, spares: { onFloor: 0, inStorage: 0 }, broken: 0 },
                { description: 'Headsets', inUse: 0, otherUse: { training: 0, conf: 0, gsm: 0, prospecting: 0, applicant: 0, visitor: 0, other: 0 }, spares: { onFloor: 0, inStorage: 0 }, broken: 0 },
                { description: 'Direct Connect', inUse: 0, otherUse: { training: 0, conf: 0, gsm: 0, prospecting: 0, applicant: 0, visitor: 0, other: 0 }, spares: { onFloor: 0, inStorage: 0 }, broken: 0 },
                { description: 'Workstations', inUse: 0, otherUse: { training: 0, conf: 0, gsm: 0, prospecting: 0, applicant: 0, visitor: 0, other: 0 }, spares: { onFloor: 0, inStorage: 0 }, broken: 0 },
                { description: 'Desk Chairs', inUse: 0, otherUse: { training: 0, conf: 0, gsm: 0, prospecting: 0, applicant: 0, visitor: 0, other: 0 }, spares: { onFloor: 0, inStorage: 0 }, broken: 0 },
                { description: 'Wireless Headsets', inUse: 0, otherUse: { training: 0, conf: 0, gsm: 0, prospecting: 0, applicant: 0, visitor: 0, other: 0 }, spares: { onFloor: 0, inStorage: 0 }, broken: 0 },
                { description: 'VPN Phone', inUse: 0, otherUse: { training: 0, conf: 0, gsm: 0, prospecting: 0, applicant: 0, visitor: 0, other: 0 }, spares: { onFloor: 0, inStorage: 0 }, broken: 0 },
            ],
            specialStations: {
                threeMonitorSetups: 0,
                prospectingStations: 0,
                visitorStations: 0,
                applicantStations: 0,
                eolComputers: 0
            }
        },
        recycling: {
            broughtBack: [ { item: '17" Monitors', quantity: 0 }, { item: '24" Monitors', quantity: 0 }, { item: 'Hard drives', quantity: 0 }, { item: 'Computers', quantity: 0 }, { item: 'Network devices', quantity: 0 }, { item: 'Printer', quantity: 0 }, { item: 'UPS batteries', quantity: 0 }, { item: 'Other', quantity: 0 } ],
            pickupRequired: [ { item: '17" Monitors', quantity: 0 }, { item: '24" Monitors', quantity: 0 }, { item: 'Hard drives', quantity: 0 }, { item: 'Computers', quantity: 0 }, { item: 'Network devices', quantity: 0 }, { item: 'Printer', quantity: 0 }, { item: 'UPS batteries', quantity: 0 }, { item: 'Other', quantity: 0 } ],
            sentToHq: [ { item: 'Headsets', quantity: 0 }, { item: 'Direct Connects', quantity: 0 }, { item: 'Webcams', quantity: 0 }, { item: 'Phones', quantity: 0 } ],
            scheduled: 'No', scheduleDate: ''
        }
    };

    const [reportData, setReportData] = useState(() => {
        const saved = localStorage.getItem('officeVisitReport');
        if (saved) {
            const parsed = JSON.parse(saved);
            // Ensure specialStations exists for backward compatibility
            if (!parsed.inventory.specialStations) {
                parsed.inventory.specialStations = {
                    threeMonitorSetups: 0,
                    prospectingStations: 0,
                    visitorStations: 0,
                    applicantStations: 0,
                    eolComputers: 0
                };
            }
            return parsed;
        }
        return initialData;
    });

    // Persist data to localStorage
    useEffect(() => {
        localStorage.setItem('officeVisitReport', JSON.stringify(reportData));
    }, [reportData]);

    // Simulate saving to SQL database
    const saveToDatabase = async () => {
        // In a real implementation, this would make an API call to save to SQL
        console.log('Saving to SQL database:', {
            user: currentUser,
            timestamp: new Date().toISOString(),
            data: reportData
        });
        
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve({ success: true, id: Date.now() });
            }, 500);
        });
    };

    const validateReport = () => {
        const newErrors = {};
        if (!reportData.rss) newErrors.rss = 'RSS is required';
        if (!reportData.office) newErrors.office = 'Office is required';
        if (!reportData.date) newErrors.date = 'Date is required';
        
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const generateAndSubmitPDF = async () => {
        if (!validateReport()) {
            setModalContent({
                title: 'Validation Error',
                body: 'Please fill in all required fields before submitting the report.'
            });
            setIsModalOpen(true);
            return;
        }

        setShowFullReportEmail(true);
    };

    const handleSendFullReport = async (emailData) => {
        setIsLoading(true);
        
        try {
            // Save to database
            const dbResult = await saveToDatabase();
            
            // In a real implementation, this would:
            // 1. Generate PDF on server
            // 2. Send email via Exchange/SMTP
            // 3. Save photos to shared drive
            
            console.log('Full report email:', emailData);
            console.log('Database save result:', dbResult);
            console.log('Photos would be saved to:', `\\\\SharedDrive\\OfficeReports\\${reportData.office}\\${reportData.date}\\`);
            
            setModalContent({
                title: 'Report Submitted Successfully',
                body: `Your report has been submitted and saved to the database (ID: ${dbResult.id}). The PDF has been sent to: ${emailData.to.join(', ')}. Photos have been saved to the shared drive.`
            });
            setIsModalOpen(true);
            
            // Clear form after successful submission
            setTimeout(() => {
                if (window.confirm('Report submitted successfully. Would you like to start a new report?')) {
                    setReportData(initialData);
                    localStorage.removeItem('officeVisitReport');
                    setActivePage('Dashboard');
                }
            }, 2000);
            
        } catch (error) {
            setModalContent({
                title: 'Submission Error',
                body: 'There was an error submitting your report. Please try again.'
            });
            setIsModalOpen(true);
        } finally {
            setIsLoading(false);
        }
    };

    const exportData = (format) => {
        const dataStr = JSON.stringify(reportData, null, 2);
        const blob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `office_visit_report_${reportData.office}_${reportData.date}.json`;
        a.click();
        setShowExportOptions(false);
    };

    const importData = (event) => {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const imported = JSON.parse(e.target.result);
                    setReportData(imported);
                    setModalContent({
                        title: 'Import Successful',
                        body: 'Report data has been imported successfully.'
                    });
                    setIsModalOpen(true);
                } catch (error) {
                    setModalContent({
                        title: 'Import Error',
                        body: 'Failed to import data. Please check the file format.'
                    });
                    setIsModalOpen(true);
                }
            };
            reader.readAsText(file);
        }
    };

    const clearData = () => {
        setConfirmDialog({
            isOpen: true,
            title: 'Clear All Data',
            message: 'Are you sure you want to clear all report data? This action cannot be undone.',
            onConfirm: () => {
                setReportData(initialData);
                localStorage.removeItem('officeVisitReport');
                setModalContent({
                    title: 'Data Cleared',
                    body: 'All report data has been cleared.'
                });
                setIsModalOpen(true);
            }
        });
    };

    const sendInventoryReport = (emailData) => {
        // Simulate sending email
        console.log('Sending inventory email:', emailData);
        console.log('From:', currentUser);
        
        setModalContent({
            title: 'Inventory Report Sent',
            body: `Inventory report for ${reportData.office} has been sent to: ${emailData.to.join(', ')}`
        });
        setIsModalOpen(true);
    };

    const downloadPhotos = () => {
        // In a real implementation, this would create a zip file with the folder structure
        const photoData = {
            office: reportData.office,
            date: reportData.date,
            structure: {
                [reportData.office]: {
                    [reportData.date]: {
                        'Data Closet': reportData.pictures.dataCloset || [],
                        'Training Room': reportData.pictures.trainingRoom || []
                    }
                }
            }
        };
        
        console.log('Photo structure:', photoData);
        
        setModalContent({
            title: 'Photos Prepared',
            body: `Photos would be organized in: \\\\SharedDrive\\OfficeReports\\${reportData.office}\\${reportData.date}\\[Data Closet|Training Room]`
        });
        setIsModalOpen(true);
    };

    const pages = {
        'Dashboard': { component: DashboardPage, icon: <Home className="text-indigo-500"/> },
        'Summary': { component: SummaryPage, icon: <FileText className="text-blue-500"/> },
        'Office Hardware': { component: HardwarePage, icon: <HardDrive className="text-green-500"/> },
        'Data Closet': { component: DataClosetPage, icon: <Server className="text-purple-500"/> },
        'Inventory': { component: InventoryPage, icon: <Warehouse className="text-orange-500"/> },
        'Recycling': { component: RecyclingPage, icon: <Recycle className="text-teal-500"/> },
    };

    const PageComponent = pages[activePage].component;
    
    return (
        <div className={theme}>
            <div className="bg-gray-100 dark:bg-gray-900 min-h-screen font-sans">
                <header className="bg-white dark:bg-gray-800 shadow-md sticky top-0 z-30">
                    <div className="container mx-auto px-4 sm:px-6 lg:px-8">
                        <div className="flex justify-between items-center py-4">
                            <h1 className="text-3xl font-bold text-gray-800 dark:text-gray-100">Office Visit Report</h1>
                            <div className="flex items-center space-x-4">
                                <Button onClick={toggleTheme} variant="ghost" className="p-2" tooltip="Toggle theme">
                                    {theme === 'light' ? <Moon size={20} /> : <Sun size={20} />}
                                </Button>
                                
                                <div className="relative">
                                    <Button onClick={() => setShowExportOptions(!showExportOptions)} variant="ghost" tooltip="Import/Export">
                                        <FileJson size={20} />
                                    </Button>
                                    {showExportOptions && (
                                        <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg py-2 z-10">
                                            <button onClick={() => exportData('json')} className="w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700">
                                                Export JSON
                                            </button>
                                            <label className="w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer block">
                                                Import JSON
                                                <input type="file" accept=".json" onChange={importData} className="hidden" />
                                            </label>
                                            <button onClick={clearData} className="w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 text-red-600">
                                                Clear All Data
                                            </button>
                                        </div>
                                    )}
                                </div>
                                
                                {(reportData.pictures.dataCloset?.length > 0 || reportData.pictures.trainingRoom?.length > 0) && (
                                    <Button onClick={downloadPhotos} variant="ghost" tooltip="Download Photos">
                                        <Image size={20} />
                                    </Button>
                                )}
                                
                                <Button onClick={generateAndSubmitPDF} disabled={isLoading} variant="primary">
                                    {isLoading ? 'Submitting...' : <><Send size={18}/> Submit Report</>}
                                </Button>
                            </div>
                        </div>
                        <nav className="flex space-x-1 border-b border-gray-200 dark:border-gray-700 -mb-px overflow-x-auto">
                            {Object.keys(pages).map(page => (
                                <button
                                    key={page}
                                    onClick={() => setActivePage(page)}
                                    className={`px-4 py-3 font-semibold text-sm flex items-center space-x-2 border-b-2 transition-colors duration-200 whitespace-nowrap ${activePage === page ? 'border-blue-600 text-blue-600 dark:text-blue-400' : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:border-gray-300 dark:hover:border-gray-600'}`}
                                >
                                    {pages[page].icon}
                                    <span>{page}</span>
                                </button>
                            ))}
                        </nav>
                    </div>
                </header>

                <main className="container mx-auto p-4 sm:p-6 lg:p-8">
                    {activePage === 'Dashboard' ? (
                        <PageComponent data={reportData} currentUser={currentUser} />
                    ) : activePage === 'Summary' ? (
                        <PageComponent data={reportData} setData={setReportData} errors={errors} setErrors={setErrors} />
                    ) : activePage === 'Inventory' ? (
                        <PageComponent data={reportData} setData={setReportData} onSendReport={sendInventoryReport} currentUser={currentUser} />
                    ) : (
                        <PageComponent data={reportData} setData={setReportData} />
                    )}
                </main>
                
                <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} title={modalContent.title}>
                    {modalContent.body}
                </Modal>
                
                <EmailModal
                    isOpen={showFullReportEmail}
                    onClose={() => setShowFullReportEmail(false)}
                    onSend={handleSendFullReport}
                    type="fullReport"
                    recipients={EMAIL_RECIPIENTS.fullReport}
                    data={reportData}
                />
                
                <ConfirmDialog
                    isOpen={confirmDialog.isOpen}
                    onClose={() => setConfirmDialog({ ...confirmDialog, isOpen: false })}
                    onConfirm={confirmDialog.onConfirm}
                    title={confirmDialog.title}
                    message={confirmDialog.message}
                />
            </div>
        </div>
    );
}